#define _CRT_SECURE_NO_WARNINGS
#define _WINSOCK_DEPRECATED_NO_WARNINGS
#include <Winsock2.h> 
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#pragma comment(lib,"ws2_32.lib")
#define BUFSIZE 1024
#define PORT 0070 //0070은 임시 포트 번호. 원하는 포트 번호 넣으면 된다. 

int main() {
	WSADATA winsockData; 
	SOCKET serverSocket; 
	SOCKADDR_IN serverAddr; 
	SOCKADDR_IN clientAddr; 

	char buf[BUFSIZE]; 
	int recvLen; 
	int sendLen; 
	int clientSize;
	char msg1[] = "IMHACKER_2020111361"; 
	char msg2[] = "2020111361";

	
	if (WSAStartup(0x202, &winsockData) == SOCKET_ERROR) { 
		printf("[-] Winsock Initialization failed.\n");
		WSACleanup();
		return 0;
	}
	printf("[+] Winsock Init.\n");
	memset(&serverAddr, 0, sizeof(serverAddr));
	memset(&clientAddr, 0, sizeof(clientAddr));
	memset(buf, 0, BUFSIZE);

	//���� �ּ� ����ü �ʱ�ȭ 
	serverAddr.sin_family = AF_INET; // 
	serverAddr.sin_addr.s_addr = inet_addr("보내고자 하는 아이피 주소"); // C&C ���� IP �ּ� 
	serverAddr.sin_port = htons(PORT); //  C&C ���� ��Ʈ�ּ�  10004

	serverSocket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP); // ������ ����, ���� ��ũ���Ϳ� ���� �����͸� �ְ� �ް� �ȴ�. IPv4, UDP, IPPROTO_UDP
	if (serverSocket == INVALID_SOCKET) {
		printf("[-] Socket creation failed.\n");
		WSACleanup();
		return 0;
	}
	printf("[+] Socket create.\n");


	sendLen = sendto(serverSocket, msg1, sizeof(msg1), 0,
			(struct sockaddr*)&serverAddr, sizeof(serverAddr));
	if (sendLen != sizeof(msg1)) {
		printf("[-] sendto() error.\n");
		return 0;
	}
	// C&C �����κ��� �����͸� �о� ���̴� �Լ� (victim�� IP:PORT )
	clientSize = sizeof(clientAddr);
	recvLen = recvfrom(serverSocket, buf, BUFSIZE, 0,
			(struct sockaddr*)&clientAddr, &clientSize); // (���ε�� ������ ���� ��ũ����, ���ŵǴ� �����͸� ������ ���� ������, ������ ����, �۾� ���� �÷���, ȣ��Ʈ�� �ּҸ� ����, �ּ����� ����ü�� ����) 
	if (recvLen < 0) {
			printf("[-] recvfrom() error.\n");
			return 0;
	}
	printf("[+] recv msg: %s\n", buf);

	// ������ �ڵ带 �ϵ��ڵ����� �ʰ�, ������ �ּҸ� �����ؼ� ������ �Լ� 
	int i = 0;
	char* addr2[10] = { NULL, }; // �������� ���ڿ� ������ �迭 
	char* ptr1 = strtok(buf, "_");
	while (ptr1 != NULL) {
		addr2[i] = ptr1; //�ڸ� ���ڿ��� =>  addr2�� ����
		i++;
		ptr1 = strtok(NULL, ":"); //���ڿ��� �߶� �����͸� ��ȯ�Ѵ�.
	}
	char* ptr2 = strstr(buf + 18, "7");
	int port2 = atoi(ptr2); //�������� ��Ʈ��ȣ�� ��Ʈ������ ��ȯ

	clientAddr.sin_family = AF_INET;
	clientAddr.sin_addr.s_addr = inet_addr(addr2[1]);
	clientAddr.sin_port = htons(port2);

	//UDP ������ ����(�й� 10�� �ݺ��ؼ� ����) 
	for (int j = 0; j < 10; j++) {
		sendLen = sendto(serverSocket, msg2, BUFSIZE, 0,
			(struct sockaddr*)&clientAddr, sizeof(clientAddr));
		if (sendLen != BUFSIZE) {
			printf("[-] sendto() error.\n");
			return 0;
		}
	}
	//�Ŀ� �����κ��� �޽��� �޾� ���.
	recvLen = recvfrom(serverSocket, buf, BUFSIZE, 0,
		(struct sockaddr*)&clientAddr, &clientSize); // (���ε�� ������ ���� ��ũ����, ���ŵǴ� �����͸� ������ ���� ������, ������ ����, �۾� ���� �÷���, ȣ��Ʈ�� �ּҸ� ����, �ּ����� ����ü�� ����) 
	if (recvLen < 0) {
		printf("[-] recvfrom() error.\n");
		return 0;
	}
	printf("[+] recv msg: %s\n", buf);

	closesocket(serverSocket);
	WSACleanup();
}